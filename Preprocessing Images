import cv2
from ultralytics import YOLO
import os
import tensorflow as tk
from keras import layers
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout
import numpy as np
import ultralytics
ultralytics.checks()

train_dir = 'kaggle/input/deepfake-and-real-images/Dataset/Train'
validation_dir = 'kaggle/input/deepfake-and-real-images/Dataset/Validation'
test_dir = 'kaggle/input/deepfake-and-real-images/Dataset/Test'
# Preprocessing the images
model = YOLO("/kaggle/input/modelbestx/best.pt")
# Function to extract face ROI from an image using YOLO
def extract_face(img_path):
#Perform object detection
results = model(img_path)
boxes = results[0].boxes
img = cv2.imread(img_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
roi = None

if len(boxes) > 0:
    for i, box in enumerate(boxes):
        top_left_x = int(box.xyxy.tolist()[0][0])
        top_left_y = int(box.xyxy.tolist()[0][1])
        bottom_right_x = int(box.xyxy.tolist()[0][2])
        bottom_right_y = int(box.xyxy.tolist()[0][3])
        # Crop face region
        roi = img[top_left_y:bottom_right_y, top_left_x:bottom_right_x]
        return roi
else:
    return None

# Additional variables like clip_limit and grid_size are defined outside the function.
clip_limit = 2.0
grid_size = (8,8)

# Define data augmentation and normalization
datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')
# Use datagen.flow_from_directory() to load images from the directory
train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(224,224),
    batch_size=16,
    class_mode='binary',
    classes=['Fake', 'Real']
)
validation_dir = datagen.flow_from_directory(
    validation_dir,
    target_size=(224,224),
    batch_size=16,
    class_mode='binary',
    classes=['Fake', 'Real']
)
test_dir = datagen.flow_from_directory(
    test_dir,
    target_size=(224,224),
    batch_size=16,
    class_mode='binary',
    classes=['Fake', 'Real']
)
# Define the model
model = Sequential()
# Convolutional Layer 1
model.add(Conv2D(64, (3,3), activation='relu',padding='same',imput_shape=(224,224,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(3,3)))
model.add(Dropout(0.25))

# Convolutional Layer 2
model.add(Conv2D(64, (3,3), activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3,3), activation='relu',padding='same'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

# Full Connected Layer
model.add(Flatten())
model.add(Dense(1024, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Display the model summary
model.summary()

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
